{"name": "test_invalid_multiple", "status": "failed", "statusDetails": {"message": "AssertionError: assert False\n +  where False = <bound method LoginPage.notification_text_clear of <ui.pages.register_page.RegisterPage object at 0x7f3671b132e0>>()\n +    where <bound method LoginPage.notification_text_clear of <ui.pages.register_page.RegisterPage object at 0x7f3671b132e0>> = <ui.pages.register_page.RegisterPage object at 0x7f3671b132e0>.notification_text_clear\n +      where <ui.pages.register_page.RegisterPage object at 0x7f3671b132e0> = <test_ui_forms_negative.TestRegisterPageNegative object at 0x7f3671b0f5e0>.register_page", "trace": "self = <test_ui_forms_negative.TestRegisterPageNegative object at 0x7f3671b0f5e0>\n\n    def test_invalid_multiple(self):\n        '''\n        1 - Go to registration page\n        2 - Enter random user's data with invalid name and email\n        3 - Check notifications text\n        '''\n        self.register_page.go_to_this_page()\n        self.register_page.register(\n            self.fake_person.username[0:3],\n            self.fake_person.username + 'gmail.com',\n            self.fake_person.password,\n            self.fake_person.password, True)\n        assert self.register_page.notification_include('Invalid email address')\n        assert self.register_page.notification_include(\n            'Incorrect username length')\n>       assert self.register_page.notification_text_clear()\nE       assert False\nE        +  where False = <bound method LoginPage.notification_text_clear of <ui.pages.register_page.RegisterPage object at 0x7f3671b132e0>>()\nE        +    where <bound method LoginPage.notification_text_clear of <ui.pages.register_page.RegisterPage object at 0x7f3671b132e0>> = <ui.pages.register_page.RegisterPage object at 0x7f3671b132e0>.notification_text_clear\nE        +      where <ui.pages.register_page.RegisterPage object at 0x7f3671b132e0> = <test_ui_forms_negative.TestRegisterPageNegative object at 0x7f3671b0f5e0>.register_page\n\ntest_ui/test_ui_forms_negative.py:144: AssertionError"}, "description": "\n        1 - Go to registration page\n        2 - Enter random user's data with invalid name and email\n        3 - Check notifications text\n        ", "steps": [{"name": "register", "status": "passed", "parameters": [{"name": "username", "value": "'Jes'"}, {"name": "email", "value": "'Jessicagmail.com'"}, {"name": "password", "value": "'brotherleadpolicy'"}, {"name": "confirm", "value": "'brotherleadpolicy'"}, {"name": "accept_box", "value": "True"}], "start": 1639916841374, "stop": 1639916841777}, {"name": "check notification", "status": "passed", "attachments": [{"name": "notification", "source": "0011b222-a8c6-4b53-9691-1f48e7d97e53-attachment.png", "type": "image/png"}], "parameters": [{"name": "msg", "value": "'Invalid email address'"}], "start": 1639916841777, "stop": 1639916842468}, {"name": "check notification", "status": "passed", "attachments": [{"name": "notification", "source": "b9126b00-2419-400c-a43f-2d140f515d08-attachment.png", "type": "image/png"}], "parameters": [{"name": "msg", "value": "'Incorrect username length'"}], "start": 1639916842469, "stop": 1639916842578}], "start": 1639916841271, "stop": 1639916842601, "uuid": "fa73180a-69d7-436f-8a70-a1dc3bea52b4", "historyId": "d1834803ec38e1c3cb1261781f33ce24", "testCaseId": "0c2bcc516aa5989f69086e71a8a7492a", "fullName": "test_folder.test_ui.test_ui_forms_negative.TestRegisterPageNegative#test_invalid_multiple", "labels": [{"name": "epic", "value": "UI"}, {"name": "feature", "value": "Register negative"}, {"name": "tag", "value": "UI"}, {"name": "parentSuite", "value": "test_folder.test_ui"}, {"name": "suite", "value": "test_ui_forms_negative"}, {"name": "subSuite", "value": "TestRegisterPageNegative"}, {"name": "host", "value": "gwynbleidd-NBR-WAX9"}, {"name": "thread", "value": "180908-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_folder.test_ui.test_ui_forms_negative"}]}