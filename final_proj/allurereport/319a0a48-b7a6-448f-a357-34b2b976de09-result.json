{"name": "test_double_email", "status": "skipped", "statusDetails": {"message": "XFAIL no checking double email usage\n\nAssertionError: assert False\n +  where False = <bound method LoginPage.notification_include of <ui.pages.register_page.RegisterPage object at 0x7fa0d1dbba00>>('User already exist')\n +    where <bound method LoginPage.notification_include of <ui.pages.register_page.RegisterPage object at 0x7fa0d1dbba00>> = <ui.pages.register_page.RegisterPage object at 0x7fa0d1dbba00>.notification_include\n +      where <ui.pages.register_page.RegisterPage object at 0x7fa0d1dbba00> = <test_ui_forms_negative.TestRegisterPageNegative object at 0x7fa0d1dbddc0>.register_page", "trace": "self = <test_ui_forms_negative.TestRegisterPageNegative object at 0x7fa0d1dbddc0>\n\n    @pytest.mark.xfail(reason=\"no checking double email usage\")\n    def test_double_email(self):\n        '''\n        1 - Go to registration page\n        2 - Register user\n        3 - Return to registration page\n        4 - Try to register with same email\n        3 - Check notifications about existance of such user\n        '''\n        self.register_page.go_to_this_page()\n        self.register_page.register(\n            self.fake_person.username,\n            self.fake_person.email,\n            self.fake_person.password,\n            self.fake_person.password, True)\n        self.main_page.logout()\n        self.register_page.go_to_this_page()\n        self.register_page.register(\n        self.fake_person.username + '2',\n        self.fake_person.email,\n        self.fake_person.password,\n        self.fake_person.password, True)\n        assert self.register_page.blocked_on_page()\n>       assert self.register_page.notification_include('User already exist')\nE       AssertionError: assert False\nE        +  where False = <bound method LoginPage.notification_include of <ui.pages.register_page.RegisterPage object at 0x7fa0d1dbba00>>('User already exist')\nE        +    where <bound method LoginPage.notification_include of <ui.pages.register_page.RegisterPage object at 0x7fa0d1dbba00>> = <ui.pages.register_page.RegisterPage object at 0x7fa0d1dbba00>.notification_include\nE        +      where <ui.pages.register_page.RegisterPage object at 0x7fa0d1dbba00> = <test_ui_forms_negative.TestRegisterPageNegative object at 0x7fa0d1dbddc0>.register_page\n\ntest_ui/test_ui_forms_negative.py:194: AssertionError"}, "description": "\n        1 - Go to registration page\n        2 - Register user\n        3 - Return to registration page\n        4 - Try to register with same email\n        3 - Check notifications about existance of such user\n        ", "steps": [{"name": "register", "status": "passed", "parameters": [{"name": "username", "value": "'Whitney'"}, {"name": "email", "value": "'Maddox@gmail.com'"}, {"name": "password", "value": "'simpleleadertask'"}, {"name": "confirm", "value": "'simpleleadertask'"}, {"name": "accept_box", "value": "True"}], "start": 1639472923296, "stop": 1639472924438}, {"name": "logout with url", "status": "passed", "start": 1639472924438, "stop": 1639472924581}, {"name": "register", "status": "passed", "parameters": [{"name": "username", "value": "'Whitney2'"}, {"name": "email", "value": "'Maddox@gmail.com'"}, {"name": "password", "value": "'simpleleadertask'"}, {"name": "confirm", "value": "'simpleleadertask'"}, {"name": "accept_box", "value": "True"}], "start": 1639472924709, "stop": 1639472925879}, {"name": "check notification", "status": "passed", "attachments": [{"name": "notification", "source": "cf6ab51e-da7a-4af7-a85a-cfd809aefeba-attachment.png", "type": "image/png"}], "parameters": [{"name": "msg", "value": "'User already exist'"}], "start": 1639472925885, "stop": 1639472926578}], "attachments": [{"name": "log", "source": "7b2f40f9-95cb-4bea-aa24-4c5d06520053-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "7f548188-dd1d-4978-9a25-e013969fdffb-attachment.txt", "type": "text/plain"}], "start": 1639472922904, "stop": 1639472926579, "uuid": "42fac9b3-e5d9-4a89-a6ad-0799f85002ba", "historyId": "45ac04679233b71fa67c5e55def99c83", "testCaseId": "9c43ced96f6b234cfd56b01faf4e0e61", "fullName": "test_folder.test_ui.test_ui_forms_negative.TestRegisterPageNegative#test_double_email", "labels": [{"name": "epic", "value": "UI"}, {"name": "feature", "value": "Register negative"}, {"name": "tag", "value": "@pytest.mark.xfail(reason='no checking double email usage')"}, {"name": "tag", "value": "UI"}, {"name": "parentSuite", "value": "test_folder.test_ui"}, {"name": "suite", "value": "test_ui_forms_negative"}, {"name": "subSuite", "value": "TestRegisterPageNegative"}, {"name": "host", "value": "gwynbleidd-NBR-WAX9"}, {"name": "thread", "value": "30825-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_folder.test_ui.test_ui_forms_negative"}]}